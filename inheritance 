Multi-Level Inheritance

Code:

#include <iostream>
#include <string>
using namespace std;
class Student {
public:
    string name;
    int rollNumber;
    Student(string n, int roll) : name(n), rollNumber(roll) {}

    void displayStudentDetails() {
        cout << "Student Name: " << name << endl;
        cout << "Roll Number: " << rollNumber << endl;
    }
};

class GeneralSecretary : public Student {
public:
    string department;
    GeneralSecretary(string n, int roll, string dept) : Student(n, roll), department(dept) {}

    void displayGeneralSecretaryDetails() {
        displayStudentDetails(); // Calling base class function
        cout << "Department: " << department << endl;
    }
};

// Derived Class (inherits from GeneralSecretary)
class President : public GeneralSecretary {
public:
    string committee;
    President(string n, int roll, string dept, string comm)
        : GeneralSecretary(n, roll, dept), committee(comm) {}

    void displayPresidentDetails() {
        displayGeneralSecretaryDetails(); 
        cout << "Committee: " << committee << endl;
    }
};

int main() {
    President p("Gargi Chaudhari", 8, "Technical", "GDSC");
    p.displayPresidentDetails();

    return 0;
}

Output:

Student Name: Gargi Chaudhari
Roll Number: 8
Department: Technical
Committee: GDSC



































Multiple Inheritance

Code:

#include <iostream>
using namespace std;
class M {
protected:
    int m;
public:
    void get_m(int);
};
class N {
protected:
    int n;
public:
    void get_n(int);
};
class P : public M, public N
{
public:
    void display(void);
};
void M ::get_m(int x) {
    m = x;
}
void N ::get_n(int y) {
    n = y;
}
void P ::display(void) {
    cout << "m'=" << m << "\n";
    cout << "n = " << n << " \n";
    cout << "m*n = " << m * n << "\n";
}
int main() {
    P p;
    p.get_m(10);
    p.get_n(20);
    p.display();
    return 0;
}

Output:
m'=10
n = 20 
m*n = 200
